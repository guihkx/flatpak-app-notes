Submodule 3rdParty/qautostart contains modified content
diff --git a/3rdParty/qautostart/src/qautostart.cpp b/3rdParty/qautostart/src/qautostart.cpp
index 2bf271a..0f69968 100644
--- a/3rdParty/qautostart/src/qautostart.cpp
+++ b/3rdParty/qautostart/src/qautostart.cpp
@@ -30,11 +30,7 @@
 #include <QString>
 #include <QFile>
 #include <QDir>
-
-
-Autostart::Autostart() {
-
-}
+#include <QtGlobal>
 
 #if defined (Q_OS_WIN)
 #define REG_KEY "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
@@ -55,7 +51,7 @@ void Autostart::setAutostart(bool autostart) {
     if (autostart) {
         settings.setValue(appName() , appPath().replace('/','\\'));
     } else {
-        settings.remove(appPath());
+        settings.remove(appName());
     }
 }
 
@@ -104,19 +100,31 @@ QString Autostart::appPath() const {
 
 #elif defined (Q_OS_LINUX)
 bool Autostart::isAutostart() const {
-    QFileInfo check_file(QDir::homePath() + "/.config/autostart/" + appName() +".desktop");
+    QFileInfo desktopFile(Autostart::getAutostartDir() + "/" + appName() + ".desktop");
+    return desktopFile.isFile();
+}
 
-    if (check_file.exists() && check_file.isFile()) {
-        return true;
+// Spec: https://specifications.freedesktop.org/autostart-spec/autostart-spec-0.5.html#idm45071660440416
+QString Autostart::getAutostartDir() const {
+    QByteArray xdgEnv = qgetenv("XDG_CONFIG_HOME");
+    if (!xdgEnv.isEmpty()) {
+        QDir xdgConfigHome = QDir(xdgEnv);
+        if (xdgConfigHome.exists()) {
+            return QDir::cleanPath(xdgConfigHome.absolutePath() + "/autostart");
+        }
     }
+    return QDir::homePath() + "/.config/autostart";
+}
 
-    return false;
+bool Autostart::isFlatpak() const {
+    QFileInfo flatpakInfo("/.flatpak-info");
+    return flatpakInfo.isFile() && !qgetenv("FLATPAK_ID").isEmpty();
 }
 
 void Autostart::setAutostart(bool autostart) {
-    QString path = QDir::homePath() + "/.config/autostart/";
-    QString name = appName() +".desktop";
-    QFile file(path+name);
+    QString path = Autostart::getAutostartDir();
+    QString name = appName() + ".desktop";
+    QFile file(path + "/" + name);
 
     file.remove();
 
@@ -128,15 +136,21 @@ void Autostart::setAutostart(bool autostart) {
 
         if (file.open(QIODevice::ReadWrite)) {
             QTextStream stream(&file);
-            stream << "[Desktop Entry]" << endl;
-            stream << "Exec=" << appPath() << endl;
-            stream << "Type=Application" << endl;
+            stream << "[Desktop Entry]" << Qt::endl;
+            stream << "Exec=" << appPath() << Qt::endl;
+            stream << "Type=Application" << Qt::endl;
         }
     }
 }
 
 QString Autostart::appPath() const {
-    return QCoreApplication::applicationFilePath() + " --autostart";
+    QString cmd;
+    if (Autostart::isFlatpak()) {
+        cmd = "flatpak run " + QString::fromUtf8(qgetenv("FLATPAK_ID"));
+    } else {
+        cmd = QCoreApplication::applicationFilePath();
+    }
+    return cmd + " --autostart";
 }
 
 #else
@@ -155,5 +169,10 @@ QString Autostart::appPath() const {
 #endif
 
 QString Autostart::appName() const {
-    return QFileInfo(QCoreApplication::applicationFilePath()).fileName();
+#if defined(Q_OS_LINUX)
+    if (Autostart::isFlatpak()) {
+        return QString::fromUtf8(qgetenv("FLATPAK_ID"));
+    }
+#endif
+    return QCoreApplication::applicationName();
 }
diff --git a/3rdParty/qautostart/src/qautostart.h b/3rdParty/qautostart/src/qautostart.h
index 3458a31..77690af 100644
--- a/3rdParty/qautostart/src/qautostart.h
+++ b/3rdParty/qautostart/src/qautostart.h
@@ -23,17 +23,17 @@
 #ifndef AUTOSTART_H
 #define AUTOSTART_H
 
-#include <QObject>
+#include <QString>
 
 class Autostart
-    : public QObject
 {
-    Q_OBJECT
 public:
-    explicit Autostart();
-
     bool isAutostart() const;
     void setAutostart(bool autostart);
+#if defined (Q_OS_LINUX)
+    QString getAutostartDir() const;
+    bool isFlatpak() const;
+#endif
 
 protected:
     QString appPath() const;
